{"version":3,"sources":["about/profile2.jpeg","navbar/navbar.js","research/research.js","about/about.js","navbar/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NameBrand","to","className","Menu","Navbar","Research","About","src","Profile","alt","href","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,uC,2ICGrCC,G,MAAY,kBAChB,kBAAC,IAAD,CAAMC,GAAG,IAAIC,UAAU,cAAvB,eAGIC,EAAO,kBACX,yBAAKD,UAAU,QACb,kBAAC,IAAD,CAAMD,GAAG,KAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,QAAT,OACA,kBAAC,IAAD,CAAMA,GAAG,KAAT,YAWWG,EAPA,kBACb,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCbWC,EAJE,kBACf,4D,iBCyBaC,EAxBD,kBACZ,yBAAKJ,UAAU,mBACb,yBAAKK,IAAKC,IAASC,IAAI,mBACvB,yBAAKP,UAAU,8BACb,kGAEK,uBAAGQ,KAAK,iFAAR,oCAFL,oBAGc,uBAAGA,KAAK,6EAAR,UAHd,KAKA,sCACU,uBAAGA,KAAK,gCAAR,eADV,KACkE,kBAAC,IAAD,CAAMT,GAAG,QAAT,aADlE,KACoG,uBAAGS,KAAK,uCAAR,cADpG,QACqK,kBAAC,IAAD,CAAMT,GAAG,QAAT,eADrK,sIAMA,kEAEK,uBAAGS,KAAK,+BAAR,YAFL,QAE4D,uBAAGA,KAAK,8BAAR,yBAF5D,UAEiI,uBAAGA,KAAK,8BAAR,aAFjI,2EAGwE,kBAAC,IAAD,CAAMT,GAAG,aAAT,YAHxE,QCVSU,EANA,kBACb,yBAAKT,UAAU,UACb,oDCwBWU,MAnBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKV,UAAU,kBACb,gCACE,kBAAC,EAAD,OAEF,8BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,gCACE,kBAAC,EAAD,UCVUW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.944bc240.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile2.c2cbc587.jpeg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NameBrand = () => (\n  <Link to=\"/\" className=\"name-brand\">Yunyi Zhu</Link>\n);\n\nconst Menu = () => (\n  <div className=\"menu\">\n    <Link to=\"/\">About</Link>\n    <Link to=\"/research\">Research</Link>\n    <Link to=\"/art\">Art</Link>\n    <Link to=\"/\">Resume</Link>\n  </div>\n);\n\nconst Navbar = () => (\n  <nav>\n    <NameBrand />\n    <Menu />\n  </nav>\n);\n\nexport default Navbar;","import React from 'react';\n\nconst Research = () => (\n  <div>This is the research page!</div>\n);\n\nexport default Research;","import React from 'react';\nimport Profile from './profile2.jpeg';\nimport { Link } from 'react-router-dom';\n\nconst About = () => (\n  <div className=\"about-container\">\n    <img src={Profile} alt=\"./profile1.jpg\"/>\n    <div className=\"self-description-container\">\n      <p>\n        Hello, I am Yunyi! I am an undergraduate student at MIT majoring\n        in <a href=\"http://catalog.mit.edu/degree-charts/computer-science-engineering-course-6-3/\">Computer Science and Engineering</a> and\n        minoring in <a href=\"http://architecture.mit.edu/architecture-and-urbanism/degree/minor-design\">Design</a>.\n      </p>\n      <p>\n        I enjoy <a href=\"https://github.com/yunyizhu1\">programming</a>, <Link to=\"/art\">designing</Link>, <a href=\"https://www.deviantart.com/meow9357\">art-making</a> and <Link to=\"/art\">prototyping</Link>.\n        I strive to lower the barrier for people to create\n        by making higher-level programming languages\n        and customizable designer tools.\n      </p>\n      <p>\n        I worked as a research assistant\n        in <a href=\"https://hcie.csail.mit.edu/\">HCIE Lab</a> and <a href=\"https://sdg.csail.mit.edu/\">Software Design Group</a> under <a href=\"https://www.csail.mit.edu/\">MIT CSAIL</a>,\n        where I tried to apply my creative and technical skills in meaningful <Link to=\"/research\">research</Link>.\n      </p>\n    </div>\n  </div>\n);\n\nexport default About;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Footer = () => (\n  <div className=\"footer\">\n    <div>2019 by Yunyi Zhu</div>\n  </div>\n);\n\nexport default Footer;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './styles/styles.scss';\nimport Navbar from './navbar/navbar';\nimport Research from './research/research';\nimport Art from './art/art';\nimport About from './about/about';\nimport Footer from './navbar/footer';\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"page-container\">\n        <header>\n          <Navbar />\n        </header>\n        <body>\n          <About />\n          <Research />\n        </body>\n        <footer>\n          <Footer />\n        </footer>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}